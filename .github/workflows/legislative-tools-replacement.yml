name: üîß Herramientas Legislativas (Reemplazo de Scripts)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Herramienta a ejecutar'
        required: true
        type: choice
        options:
        - validate-proposal
        - generate-acta
        - legislative-support
      issue_number:
        description: 'N√∫mero del Issue'
        required: true
        type: string
      additional_params:
        description: 'Par√°metros adicionales (opcional)'
        required: false
        type: string

jobs:
  validate-proposal-replacement:
    name: üîç Validar Propuesta (Reemplaza Script)
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'validate-proposal'
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Obtener versi√≥n din√°mica
        id: get-version
        run: |
          if [ -f ".version" ]; then
            VERSION=$(cat .version)
          elif [ -f "CHANGELOG.md" ]; then
            VERSION=$(grep -m 1 "^## \[" CHANGELOG.md | sed 's/## \[\([^]]*\)\].*/\1/')
          else
            VERSION="3.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üèõÔ∏è Versi√≥n actual: v$VERSION"
          
      - name: üîç Validaci√≥n Completa (Sin Scripts)
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = "${{ github.event.inputs.issue_number }}";
            const version = "${{ steps.get-version.outputs.version }}";
            
            console.log('üîç Validador de Propuestas Legislativas v' + version);
            console.log('==================================================');
            
            // Obtener informaci√≥n del issue
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            const title = issue.title;
            const body = issue.body || '';
            const labels = issue.labels.map(l => l.name);
            const author = issue.user.login;
            
            console.log('üìù Autor: @' + author);
            console.log('üè∑Ô∏è Etiquetas: ' + labels.join(', '));
            console.log('üìã Issue encontrado: ' + title);
            
            // SISTEMA DE VALIDACI√ìN COMPLETO
            let validationsPassed = 0;
            const totalValidations = 8;
            let validationResults = [];
            
            // 1. Validar formato del t√≠tulo
            if (/^\[(LEGISLATIVO|RESPALDADA|URGENTE)\]/.test(title)) {
              validationsPassed++;
              validationResults.push('‚úÖ Formato del t√≠tulo: V√ÅLIDO');
            } else {
              validationResults.push('‚ùå Formato del t√≠tulo: INV√ÅLIDO - Debe comenzar con [LEGISLATIVO], [RESPALDADA] o [URGENTE]');
            }
            
            // 2. Validar etiquetas requeridas
            const hasValidLabels = labels.some(label => 
              ['legislativo', 'respaldo-legislativo', 'urgente', 'reforma-constitucional'].includes(label)
            );
            if (hasValidLabels) {
              validationsPassed++;
              validationResults.push('‚úÖ Etiquetas requeridas: V√ÅLIDO');
            } else {
              validationResults.push('‚ùå Etiquetas requeridas: INV√ÅLIDO - Falta etiqueta legislativa apropiada');
            }
            
            // 3. Validar estructura del contenido
            const requiredSections = ['Propuesta', 'Justificaci√≥n', 'An√°lisis'];
            let structureValid = true;
            for (const section of requiredSections) {
              if (!body.toLowerCase().includes(section.toLowerCase())) {
                structureValid = false;
                break;
              }
            }
            if (structureValid) {
              validationsPassed++;
              validationResults.push('‚úÖ Estructura del contenido: V√ÅLIDO');
            } else {
              validationResults.push('‚ùå Estructura del contenido: INV√ÅLIDO - Faltan secciones: ' + requiredSections.join(', '));
            }
            
            // 4. Validar tipo de versionado
            if (/MAJOR|MINOR|PATCH/i.test(body)) {
              validationsPassed++;
              validationResults.push('‚úÖ Tipo de versionado: ESPECIFICADO');
            } else {
              validationResults.push('‚ùå Tipo de versionado: NO ESPECIFICADO - Debe incluir MAJOR/MINOR/PATCH');
            }
            
            // 5. Validar justificaci√≥n constitucional
            if (/art√≠culo|constitucional|principio/i.test(body)) {
              validationsPassed++;
              validationResults.push('‚úÖ Justificaci√≥n constitucional: PRESENTE');
            } else {
              validationResults.push('‚ö†Ô∏è Justificaci√≥n constitucional: PARCIAL - Recomendado incluir referencias constitucionales');
            }
            
            // 6. Validar checklist de pre-validaci√≥n
            const checklistCount = (body.match(/- \[[ x]\]/g) || []).length;
            if (checklistCount > 3) {
              validationsPassed++;
              validationResults.push('‚úÖ Checklist de validaci√≥n: COMPLETO');
            } else {
              validationResults.push('‚ö†Ô∏è Checklist de validaci√≥n: PARCIAL - Recomendado m√°s elementos en checklist');
            }
            
            // 7. Validar autorizaci√≥n legislativa
            const isLegislative = labels.includes('legislativo') && /MIEMBRO DEL ALTO CONGRESO/i.test(body);
            const hasBackup = labels.includes('respaldo-legislativo');
            if (isLegislative || hasBackup) {
              validationsPassed++;
              validationResults.push('‚úÖ Autorizaci√≥n legislativa: V√ÅLIDA');
            } else {
              validationResults.push('‚ö†Ô∏è Autorizaci√≥n legislativa: REVISAR - Verificar autorizaci√≥n del proponente');
            }
            
            // 8. Validar coherencia constitucional
            if (/Art√≠culo 4|principios|valores/i.test(body)) {
              validationsPassed++;
              validationResults.push('‚úÖ Coherencia constitucional: VERIFICADA');
            } else {
              validationResults.push('‚ö†Ô∏è Coherencia constitucional: PARCIAL - Verificar alineaci√≥n con Art√≠culo 4');
            }
            
            // Calcular resultado final
            const percentage = Math.floor((validationsPassed * 100) / totalValidations);
            
            let status, statusIcon;
            if (validationsPassed === totalValidations) {
              status = 'COMPLETAMENTE V√ÅLIDA';
              statusIcon = 'üéâ';
            } else if (validationsPassed >= 6) {
              status = 'PARCIALMENTE V√ÅLIDA';
              statusIcon = '‚ö†Ô∏è';
            } else {
              status = 'REQUIERE MEJORAS';
              statusIcon = '‚ùå';
            }
            
            console.log('üìä Validaci√≥n completada: ' + percentage + '% (' + validationsPassed + '/' + totalValidations + ')');
            
            // Crear comentario de validaci√≥n simple
            const validationComment = '## ü§ñ Validaci√≥n Autom√°tica Completada (GitHub Actions)\n\n' +
              '**' + statusIcon + ' RESULTADO:** ' + status + ' (' + percentage + '% validaciones pasadas)\n\n' +
              '### üìã Detalles de Validaci√≥n:\n' +
              validationResults.map(result => '- ' + result).join('\n') + '\n\n' +
              '### üöÄ Informaci√≥n del Sistema:\n' +
              '- **Ejecutado por:** GitHub Actions v' + version + '\n' +
              '- **Fecha:** ' + new Date().toLocaleString('es-ES') + '\n' +
              '- **Sin scripts locales:** ‚úÖ Completamente automatizado\n' +
              '- **Historial:** Disponible en Actions tab\n\n' +
              '### üìä Estad√≠sticas:\n' +
              '- **Validaciones pasadas:** ' + validationsPassed + '/' + totalValidations + '\n' +
              '- **Porcentaje de √©xito:** ' + percentage + '%\n' +
              '- **Estado:** ' + status + '\n\n' +
              (validationsPassed === totalValidations 
                ? '### ‚úÖ Pr√≥ximos Pasos:\n' +
                  '1. ‚è±Ô∏è Per√≠odo de debate p√∫blico (m√≠nimo seg√∫n tipo de propuesta)\n' +
                  '2. üó≥Ô∏è Votaci√≥n del Alto Congreso Tlatocan\n' +
                  '3. üìã Implementaci√≥n t√©cnica tras aprobaci√≥n'
                : validationsPassed >= 6
                ? '### ‚ö†Ô∏è Recomendaciones:\n' +
                  '- Completar secciones faltantes\n' +
                  '- Agregar m√°s detalle en justificaci√≥n\n' +
                  '- Revisar coherencia constitucional'
                : '### ‚ùå Acciones Requeridas:\n' +
                  '- Corregir formato y estructura\n' +
                  '- Completar secciones obligatorias\n' +
                  '- Incluir justificaci√≥n constitucional\n' +
                  '- Ver [Gu√≠a T√©cnica](../Legislativo/GUIA_TECNICA_LEGISLATIVA.md)'
              ) + '\n\n---\n' +
              '**üèõÔ∏è Sistema Legislativo GitHub Actions v' + version + '**\n' +
              '*Reemplaza completamente los scripts validate-proposal.sh*';
            
            // Publicar comentario
            await github.rest.issues.createComment({
              issue_number: parseInt(issueNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: validationComment
            });
            
            console.log('‚úÖ Validaci√≥n completada y comentario publicado');
            
            // Outputs para otros jobs
            core.setOutput('validation-status', status);
            core.setOutput('validation-percentage', percentage);
            core.setOutput('validations-passed', validationsPassed);

  generate-acta-replacement:
    name: üìã Generar Acta (Reemplaza Script)
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'generate-acta'
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Obtener versi√≥n din√°mica
        id: get-version
        run: |
          if [ -f ".version" ]; then
            VERSION=$(cat .version)
          elif [ -f "CHANGELOG.md" ]; then
            VERSION=$(grep -m 1 "^## \[" CHANGELOG.md | sed 's/## \[\([^]]*\)\].*/\1/')
          else
            VERSION="3.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: üìã Generaci√≥n Completa de Acta (Sin Scripts)
        id: generate-acta
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = "${{ github.event.inputs.issue_number }}";
            const version = "${{ steps.get-version.outputs.version }}";
            
            console.log('üìã Generador de Actas de Votaci√≥n v' + version);
            console.log('==============================================');
            
            // Obtener informaci√≥n del issue y comentarios
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            const title = issue.title;
            const author = issue.user.login;
            const createdAt = issue.created_at;
            const labels = issue.labels.map(l => l.name);
            
            console.log('üìù Recopilando votos para: ' + title);
            
            // PROCESAR VOTOS
            const votes = {
              favor: [],
              contra: [],
              abstenciones: []
            };
            
            let votingComments = [];
            
            for (const comment of comments) {
              const body = comment.body.toLowerCase();
              const commentAuthor = comment.user.login;
              const commentDate = comment.created_at;
              
              if (body.includes('voto oficial') || 
                  body.includes('apruebo') || 
                  body.includes('rechazo') || 
                  body.includes('abstenci√≥n')) {
                
                let voteType = 'desconocido';
                if (body.includes('‚úÖ') || body.includes('apruebo') || body.includes('a favor')) {
                  votes.favor.push({ author: commentAuthor, date: commentDate });
                  voteType = 'A FAVOR';
                } else if (body.includes('‚ùå') || body.includes('rechazo') || body.includes('en contra')) {
                  votes.contra.push({ author: commentAuthor, date: commentDate });
                  voteType = 'EN CONTRA';
                } else if (body.includes('üü°') || body.includes('abstenci√≥n') || body.includes('abstengo')) {
                  votes.abstenciones.push({ author: commentAuthor, date: commentDate });
                  voteType = 'ABSTENCI√ìN';
                }
                
                votingComments.push('- @' + commentAuthor + ' (' + voteType + ') - ' + new Date(commentDate).toLocaleString('es-ES'));
              }
            }
            
            // Calcular estad√≠sticas
            const totalFavor = votes.favor.length;
            const totalContra = votes.contra.length;
            const totalAbstenciones = votes.abstenciones.length;
            const totalVotos = totalFavor + totalContra + totalAbstenciones;
            
            const porcentajeFavor = totalVotos > 0 ? Math.round((totalFavor * 100) / totalVotos) : 0;
            const porcentajeContra = totalVotos > 0 ? Math.round((totalContra * 100) / totalVotos) : 0;
            
            // Determinar resultado seg√∫n tipo de propuesta
            const isConstitutional = labels.includes('reforma-constitucional');
            const mayoriaRequerida = isConstitutional ? Math.ceil(totalVotos * 2 / 3) : Math.ceil(totalVotos / 2);
            const tipoMayoria = isConstitutional ? '2/3 (Reforma Constitucional)' : 'Simple (Ley Ordinaria)';
            
            const resultado = totalFavor >= mayoriaRequerida ? '‚úÖ APROBADA' : '‚ùå RECHAZADA';
            
            console.log('üìä Votos procesados: ' + totalVotos + ' total (' + totalFavor + ' favor, ' + totalContra + ' contra, ' + totalAbstenciones + ' abstenciones)');
            
            // Generar hash de verificaci√≥n
            const hashContent = title + '-' + issueNumber + '-' + new Date().toISOString();
            const crypto = require('crypto');
            const hashVerificacion = crypto.createHash('sha256').update(hashContent).digest('hex').substring(0, 16);
            
            // CREAR ACTA OFICIAL simplificada
            const actaTitle = '[ACTA OFICIAL] Votaci√≥n #' + issueNumber + ' - ' + title.replace(/^\[(LEGISLATIVO|RESPALDADA|URGENTE)\]\s*/, '');
            
            const actaBody = '# üìã ACTA OFICIAL DE VOTACI√ìN\n\n' +
              '**Alto Congreso Tlatocan - Uni√≥n Untravel**\n\n' +
              '---\n\n' +
              '## üìä INFORMACI√ìN GENERAL\n\n' +
              '- **N√∫mero de Propuesta:** #' + issueNumber + '\n' +
              '- **T√≠tulo:** ' + title + '\n' +
              '- **Proponente:** @' + author + '\n' +
              '- **Fecha de Propuesta:** ' + new Date(createdAt).toLocaleDateString('es-ES') + '\n' +
              '- **Fecha de Votaci√≥n:** ' + new Date().toLocaleDateString('es-ES') + '\n' +
              '- **Tipo de Propuesta:** ' + labels.join(', ') + '\n' +
              '- **Sistema:** GitHub Actions v' + version + '\n' +
              '- **Secretario Actuante:** Sistema Automatizado\n\n' +
              '---\n\n' +
              '## üó≥Ô∏è RESULTADO DE LA VOTACI√ìN\n\n' +
              '### ' + resultado + '\n\n' +
              '### Resumen Estad√≠stico\n\n' +
              '- ‚úÖ **A FAVOR:** ' + totalFavor + ' votos (' + porcentajeFavor + '%)\n' +
              '- ‚ùå **EN CONTRA:** ' + totalContra + ' votos (' + porcentajeContra + '%)\n' +
              '- üü° **ABSTENCIONES:** ' + totalAbstenciones + ' votos (' + Math.round((totalAbstenciones * 100) / (totalVotos || 1)) + '%)\n' +
              '- **TOTAL:** ' + totalVotos + ' votos (100%)\n\n' +
              '### An√°lisis de Qu√≥rum y Mayor√≠as\n\n' +
              '- **Tipo de mayor√≠a requerida:** ' + tipoMayoria + '\n' +
              '- **Votos necesarios para aprobar:** ' + mayoriaRequerida + '\n' +
              '- **Votos a favor obtenidos:** ' + totalFavor + '\n' +
              '- **Estado del qu√≥rum:** ' + (totalVotos >= 3 ? '‚úÖ ALCANZADO' : '‚ùå INSUFICIENTE') + ' (m√≠nimo 3 legisladores)\n\n' +
              '---\n\n' +
              '## üèõÔ∏è DECISI√ìN OFICIAL\n\n' +
              '> ### ' + resultado + '\n' +
              '> \n' +
              '> ' + (totalFavor >= mayoriaRequerida 
                ? 'La propuesta ha sido **APROBADA** por el Alto Congreso Tlatocan con ' + totalFavor + ' votos a favor de un total de ' + totalVotos + ' votos emitidos.'
                : 'La propuesta ha sido **RECHAZADA** por el Alto Congreso Tlatocan. No alcanz√≥ la mayor√≠a requerida de ' + mayoriaRequerida + ' votos.'
              ) + '\n\n' +
              '### Base Legal\n' +
              '- **Art√≠culo 15:** Reglamento de Votaci√≥n del Alto Congreso Tlatocan\n' +
              '- **Art√≠culo 16:** Proceso Legislativo\n' +
              (labels.includes('reforma-constitucional') ? '- **Art√≠culo 35:** Reforma de la Constituci√≥n\n' : '') + '\n' +
              '---\n\n' +
              '## üìù REGISTRO DETALLADO DE VOTOS\n\n' +
              '### Votos Registrados Cronol√≥gicamente\n\n' +
              (votingComments.length > 0 ? votingComments.join('\n') : '‚ö†Ô∏è No se encontraron votos formales registrados en los comentarios del issue.') + '\n\n' +
              '---\n\n' +
              '## ‚úçÔ∏è CERTIFICACI√ìN AUTOM√ÅTICA\n\n' +
              'Este acta ha sido generada autom√°ticamente por el **Sistema GitHub Actions v' + version + '** del Alto Congreso Tlatocan.\n\n' +
              '**Hash de verificaci√≥n:** ' + hashVerificacion + '\n' +
              '**Timestamp:** ' + new Date().toISOString() + '\n' +
              '**Sin dependencias de scripts:** ‚úÖ Completamente automatizado\n\n' +
              '---\n\n' +
              '### üèõÔ∏è Sello Oficial\n\n' +
              '**Alto Congreso Tlatocan**\n' +
              '**Uni√≥n Untravel**\n' +
              '**Sistema GitHub Actions v' + version + '**\n\n' +
              '*"Transparencia, Democracia y Justicia Digital"*\n\n' +
              '---\n\n' +
              '*Acta generada autom√°ticamente el ' + new Date().toLocaleDateString('es-ES') + '*\n' +
              '*Reemplaza completamente generate-acta.sh - Sin scripts externos*\n' +
              '*Para verificaciones: [GitHub Issue Original #' + issueNumber + '](../../issues/' + issueNumber + ')*';
            
            // Crear el issue del acta
            const { data: actaIssue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: actaTitle,
              body: actaBody,
              labels: ['acta-oficial', 'github-actions-generated']
            });
            
            console.log('üìã Acta oficial creada como Issue #' + actaIssue.number);
            
            // Comentar en el issue original
            const resumenComment = '## üìã Acta Oficial Generada (GitHub Actions)\n\n' +
              '**' + resultado + '** (' + porcentajeFavor + '% a favor)\n\n' +
              '**üìä Estad√≠sticas finales:**\n' +
              '- ‚úÖ Votos a favor: **' + totalFavor + '**\n' +
              '- ‚ùå Votos en contra: **' + totalContra + '**\n' +
              '- üü° Abstenciones: **' + totalAbstenciones + '**\n' +
              '- üìä Total de votos: **' + totalVotos + '**\n\n' +
              '**Mayor√≠a requerida:** ' + tipoMayoria + ' (' + mayoriaRequerida + ' votos)\n\n' +
              '**üìÑ Acta oficial completa:** #' + actaIssue.number + '\n' +
              '**üèõÔ∏è Sistema:** GitHub Actions v' + version + ' (sin scripts .sh)\n' +
              '**‚è∞ Generada:** ' + new Date().toLocaleDateString('es-ES') + '\n\n' +
              (totalFavor >= mayoriaRequerida 
                ? 'üéâ **¬°Propuesta aprobada oficialmente!** Proceder con implementaci√≥n t√©cnica.'
                : 'üìù **Propuesta no aprobada.** Revisar feedback para mejoras futuras.'
              ) + '\n\n' +
              '---\n' +
              '**üöÄ Ventajas del sistema GitHub Actions:**\n' +
              '- ‚úÖ Sin dependencias de scripts locales\n' +
              '- ‚úÖ Historial inmutable y auditable\n' +
              '- ‚úÖ Integraci√≥n nativa con GitHub\n' +
              '- ‚úÖ Certificaci√≥n autom√°tica con hash\n\n' +
              '*Procesado completamente por GitHub Actions - Reemplaza generate-acta.sh*';
            
            await github.rest.issues.createComment({
              issue_number: parseInt(issueNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: resumenComment
            });
            
            console.log('‚úÖ Acta generada y comentario de resumen publicado');
            
            // Outputs
            core.setOutput('acta-issue', actaIssue.number);
            core.setOutput('resultado', resultado);
            core.setOutput('total-votos', totalVotos);

  legislative-support:
    name: üèõÔ∏è Soporte Legislativo Automatizado
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'legislative-support'
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Obtener versi√≥n din√°mica
        id: get-version
        run: |
          if [ -f ".version" ]; then
            VERSION=$(cat .version)
          elif [ -f "CHANGELOG.md" ]; then
            VERSION=$(grep -m 1 "^## \[" CHANGELOG.md | sed 's/## \[\([^]]*\)\].*/\1/')
          else
            VERSION="3.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: üèõÔ∏è An√°lisis y Soporte Legislativo
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = "${{ github.event.inputs.issue_number }}";
            const version = "${{ steps.get-version.outputs.version }}";
            const params = "${{ github.event.inputs.additional_params }}";
            
            console.log('üèõÔ∏è Sistema de Soporte Legislativo Automatizado');
            console.log('üìã Analizando issue #' + issueNumber + ' con par√°metros: ' + params);
            
            // Obtener informaci√≥n del issue
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            const title = issue.title;
            const body = issue.body || '';
            
            // Buscar issues relacionados
            const { data: relatedIssues } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} is:issue label:legislativo,reforma-constitucional`,
              sort: 'created',
              order: 'desc',
              per_page: 10
            });
            
            // An√°lisis de tendencias legislativas
            const legislativeStats = {
              totalPropuestas: relatedIssues.total_count,
              propuestasRecientes: relatedIssues.items.length,
              tiposComunes: {}
            };
            
            relatedIssues.items.forEach(item => {
              const labels = item.labels.map(l => l.name);
              labels.forEach(label => {
                legislativeStats.tiposComunes[label] = (legislativeStats.tiposComunes[label] || 0) + 1;
              });
            });
            
            // Generar reporte de soporte
            const supportReport = '## üèõÔ∏è Reporte de Soporte Legislativo Automatizado\n\n' +
              '**Issue analizado:** #' + issueNumber + ' - ' + title + '\n' +
              '**Sistema:** GitHub Actions v' + version + '\n' +
              '**Fecha:** ' + new Date().toLocaleDateString('es-ES') + '\n\n' +
              '### üìä An√°lisis de Contexto Legislativo\n\n' +
              '**üìà Estad√≠sticas del repositorio:**\n' +
              '- Total de propuestas legislativas: ' + legislativeStats.totalPropuestas + '\n' +
              '- Propuestas recientes: ' + legislativeStats.propuestasRecientes + '\n\n' +
              '**üè∑Ô∏è Tipos m√°s comunes:**\n' +
              Object.entries(legislativeStats.tiposComunes)
                .sort(([,a], [,b]) => b - a)
                .slice(0, 5)
                .map(([label, count]) => '- ' + label + ': ' + count + ' casos')
                .join('\n') + '\n\n' +
              '### üìö Propuestas Relacionadas Recientes\n\n' +
              relatedIssues.items.slice(0, 5).map(item => 
                '- [#' + item.number + '](' + item.html_url + ') - ' + item.title + ' (' + item.state + ')'
              ).join('\n') + '\n\n' +
              '### üîç Recomendaciones Autom√°ticas\n\n' +
              (body.toLowerCase().includes('art√≠culo') 
                ? '‚úÖ **Referencias constitucionales:** Presentes en la propuesta'
                : '‚ö†Ô∏è **Recomendaci√≥n:** Agregar referencias espec√≠ficas a art√≠culos constitucionales'
              ) + '\n\n' +
              (body.toLowerCase().includes('justificaci√≥n') 
                ? '‚úÖ **Justificaci√≥n:** Secci√≥n identificada'
                : '‚ö†Ô∏è **Recomendaci√≥n:** Expandir la justificaci√≥n de la propuesta'
              ) + '\n\n' +
              '### üöÄ Pr√≥ximos Pasos Sugeridos\n\n' +
              '1. **üìã Revisi√≥n:** Usar el validador autom√°tico de propuestas\n' +
              '2. **üó≥Ô∏è Votaci√≥n:** Coordinar con miembros del Alto Congreso\n' +
              '3. **üìÑ Documentaci√≥n:** Preparar implementaci√≥n t√©cnica\n\n' +
              '### üèõÔ∏è Recursos Legislativos\n\n' +
              '- [üìñ Gu√≠a T√©cnica Legislativa](../Legislativo/GUIA_TECNICA_LEGISLATIVA.md)\n' +
              '- [üìã Plantillas de Issues](.github/ISSUE_TEMPLATE/)\n' +
              '- [üìä Constituci√≥n Actual](../CONSTITUTION.md)\n\n' +
              '---\n\n' +
              '**ü§ñ An√°lisis generado autom√°ticamente por GitHub Actions v' + version + '**\n' +
              '*Sistema de soporte legislativo sin dependencias de scripts externos*';
            
            // Publicar reporte
            await github.rest.issues.createComment({
              issue_number: parseInt(issueNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: supportReport
            });
            
            console.log('‚úÖ Reporte de soporte legislativo generado y publicado');

  summary:
    name: üìä Resumen de Ejecuci√≥n
    runs-on: ubuntu-latest
    needs: [validate-proposal-replacement, generate-acta-replacement, legislative-support]
    if: always()
    steps:
      - name: üìä Generar resumen de ejecuci√≥n
        run: |
          echo "# üéâ Herramientas Legislativas GitHub Actions"
          echo "============================================="
          echo ""
          echo "## ‚úÖ Estado de Ejecuci√≥n:"
          echo "- üîç **Validador:** ${{ needs.validate-proposal-replacement.result }}"
          echo "- üìã **Generador de Actas:** ${{ needs.generate-acta-replacement.result }}"  
          echo "- üèõÔ∏è **Soporte Legislativo:** ${{ needs.legislative-support.result }}"
          echo ""
          echo "## üöÄ **SCRIPTS .SH OFICIALMENTE REEMPLAZADOS:**"
          echo "- ‚ùå ~~validate-proposal.sh~~ ‚Üí ‚úÖ GitHub Actions"
          echo "- ‚ùå ~~generate-acta.sh~~ ‚Üí ‚úÖ GitHub Actions"
          echo "- ‚ûï **NUEVO:** Soporte legislativo automatizado"
          echo ""
          echo "## üèõÔ∏è Beneficios del Sistema GitHub Actions:"
          echo "- ‚úÖ **Sin dependencias locales** (gh, jq, bash)"
          echo "- ‚úÖ **Ejecuci√≥n en la nube** con logs persistentes"
          echo "- ‚úÖ **Integraci√≥n nativa** con GitHub Issues y API"
          echo "- ‚úÖ **Historial auditable** e inmutable"
          echo "- ‚úÖ **Escalabilidad autom√°tica** sin configuraci√≥n"
          echo "- ‚úÖ **Certificaci√≥n criptogr√°fica** autom√°tica"
          echo ""
          echo "üèõÔ∏è **El Alto Congreso Tlatoani ahora opera 100% en GitHub Actions**"